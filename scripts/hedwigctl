#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
# Copyright (C) 2015-2018 East Asian Observatory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""
hedwigctl - Hedwig proposal system control tool

Usage:
    hedwigctl admin [-v | -q] [--remove] --person <person>
    hedwigctl admin [-v | -q] --list
    hedwigctl poll [-v | -q] [--dry-run]
        [--close | --no-close]
        [--email | --no-email]
        [--figure | --no-figure]
        [--pdf | --no-pdf]
        [--publication | --no-publication]
        [--feedback | --no-feedback]
        [--moc | --no-moc]
        [--pause <delay>] [--pidfile <file>] [--logfile <file>]
    hedwigctl test_server [--debug] [--https] [--port <port>]
    hedwigctl [-v | -q] initialize_database

Options:
    --help, -h                Show usage information.
    --verbose, -v             Print debugging information.
    --list                    List people with administrative access.
    --remove                  Remove administrative access.
    --person <person>         Person identifier (number).
    --quiet, -q               Omit informational messages.
    --dry-run, -n             Do not actually peform the poll action.
    --https                   Enable use of HTTPS.
    --port <port>             Specify server port number [default: 5678].
    --debug                   Run server in debug mode.
    --pause <delay>           Repeatedly poll at the given interval (seconds).
    --pidfile <file>          PID file to use to control execution.
    --logfile <file>          File in which to record logging information.
    --close                   Enable polling for call closure.
    --no-close                Disable polling for call closure.
    --email                   Enable polling for email to send.
    --no-email                Disable polling for email to send.
    --figure                  Enable polling for figures to process.
    --no-figure               Disable polling for figures to process.
    --pdf                     Enable polling for PDF files to process.
    --no-pdf                  Disable polling for PDF files to process.
    --publication             Enable polling for publications to look up.
    --no-publication          Disable polling for publications to look up.
    --feedback                Enable polling for feedback to send.
    --no-feedback             Disable polling for feedback to send.
    --moc                     Enable polling for MOC files to import.
    --no-moc                  Disable polling for MOC files to import.
"""


from __future__ import absolute_import, division, print_function, \
    unicode_literals

import atexit
from collections import OrderedDict
import logging
import os
from time import sleep

from docopt import docopt

from hedwig.util import get_logger


integer_arguments = (
    '--port',
    '--pause',
)

commands = OrderedDict()
poll_options = OrderedDict()

script_name = 'hedwigctl'

logger = get_logger(script_name)


def main():
    """
    Main routine for the hedwigctl tool.
    """

    args = docopt(__doc__)

    for integer_argument in integer_arguments:
        if args[integer_argument] is not None:
            args[integer_argument] = int(args[integer_argument])

    for (command, func) in commands.items():
        if args.get(command):
            func(args)
            break
    else:
        raise Exception('Unknown command')


def command(f):
    """
    Decorator which adds a function to our commands dictionary.
    """

    commands[f.__name__] = f
    return f


def poll_option(f):
    """
    Decorator which adds a function to our poll options dictionary.

    Assumes the function name starts "poll_" so the name begins at the
    6th character.
    """

    poll_options[f.__name__[5:]] = f
    return f


def _configure_logging(args):
    """
    Set up the standard Python logger based on the --verbose and --quiet
    options.
    """

    loglevel = logging.INFO

    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING

    logging.basicConfig(
        level=loglevel,
        datefmt='%Y-%m-%dT%H:%M:%S',
        format='%(asctime)s %(levelname)s %(name)s %(message)s',
        filename=args['--logfile'])


@command
def admin(args):
    """
    Grant or remove administrative access for a given person.
    """

    from hedwig.config import get_database

    _configure_logging(args)

    db = get_database()

    if args['--list']:
        for person in db.search_person(admin=True).values():
            print('{:<8d} {}'.format(person.id, person.name))

    else:
        person_id = int(args['--person'])
        admin = (not args['--remove'])

        person = db.get_person(person_id)

        if person.user_id is None:
            logger.error('{} (person {}) is unregistered',
                         person.name, person_id)

        elif person.admin == admin:
            logger.error('{} (person {}) {} administrative access',
                         person.name, person_id,
                         ('already has' if person.admin else 'does not have'))

        else:
            logger.info('{} administrative access for {} (person {})',
                        ('Granting' if admin else 'Removing'),
                        person.name, person_id)

            db.update_person(person_id, admin=admin)


@command
def initialize_database(args):
    """
    Initialize the database as configured in the hedwig.ini file.
    """

    from hedwig.config import get_database
    from hedwig.db.meta import metadata

    _configure_logging(args)

    db = get_database()
    metadata.create_all(db._engine)


@command
def poll(args):
    """
    Poll for tasks to perform.
    """

    if args['--pidfile']:
        from hedwig.pidfile import pidfile_write, pidfile_running, \
            pidfile_delete

        pidfile = args['--pidfile']
        if pidfile_running(pidfile):
            return

        pidfile_write(pidfile, os.getpid())
        atexit.register(pidfile_delete, pidfile)

    from hedwig.config import get_database
    from hedwig.db.util import ReadOnlyWrapper

    _configure_logging(args)

    db = get_database()

    dry_run = args['--dry-run']

    # In dry-run mode, apply read-only wrapper to database control object.
    if dry_run:
        db = ReadOnlyWrapper(db)

    while True:
        # Do explicitly-requested poll actions.
        n_requested = 0
        for (option, func) in poll_options.items():
            if args['--' + option]:
                func(db, dry_run)
                n_requested += 1

        # If nothing was requested explictly, do everything not forbidden.
        if not n_requested:
            for (option, func) in poll_options.items():
                if not args['--no-' + option]:
                    func(db, dry_run)

        if args['--pause']:
            sleep(args['--pause'])

        else:
            break


@poll_option
def poll_close(db, dry_run):
    from hedwig.admin.poll import close_completed_call

    logger.debug('Checking for calls to close')

    n_closed = close_completed_call(db, dry_run=dry_run)

    if n_closed:
        logger.info('Closed {} call(s)', n_closed)


@poll_option
def poll_email(db, dry_run):
    from hedwig.email.poll import send_queued_messages

    logger.debug('Checking for queued email messages')

    n_sent = send_queued_messages(db, dry_run=dry_run)

    if n_sent:
        logger.info('Sent {} message(s)', n_sent)


@poll_option
def poll_figure(db, dry_run):
    from hedwig.file.poll import \
        process_proposal_figure, process_review_figure

    logger.debug('Checking for proposal figures to process')

    n_processed = process_proposal_figure(db, dry_run=dry_run)

    logger.debug('Checking for review figures to process')

    n_processed += process_review_figure(db, dry_run=dry_run)

    if n_processed:
        logger.info('Processed {} figure(s)', n_processed)


@poll_option
def poll_pdf(db, dry_run):
    from hedwig.file.poll import process_proposal_pdf

    logger.debug('Checking for PDF files to process')

    n_processed = process_proposal_pdf(db, dry_run=dry_run)

    if n_processed:
        logger.info('Processed {} PDF file(s)', n_processed)


@poll_option
def poll_publication(db, dry_run):
    from hedwig.publication.poll import process_publication_references

    logger.debug('Checking for publication references to process')

    n_processed = process_publication_references(db, dry_run=dry_run)

    if n_processed:
        logger.info('Processed {} publication reference(s)',
                    n_processed)


@poll_option
def poll_feedback(db, dry_run):
    from hedwig.admin.poll import send_proposal_feedback

    logger.debug('Checking for proposals with feedback ready to send')

    n_processed = send_proposal_feedback(db, dry_run=dry_run)

    if n_processed:
        logger.info('Sent feedback for {} proposal(s)', n_processed)


@poll_option
def poll_moc(db, dry_run):
    from hedwig.file.poll import process_moc

    logger.debug('Checking for MOC files to import')

    n_processed = process_moc(db, dry_run=dry_run)

    if n_processed:
        logger.info('Imported cells from {} MOC file(s)', n_processed)


@command
def test_server(args):
    """
    Run a test web service.

    The --debug option enables access to the debugger.  It must not
    be used in an environment where access to the server is not
    restricted.
    """

    from hedwig.web.app import create_web_app

    options = {
        'port': args['--port'],
    }
    app_options = {}

    if args['--debug']:
        options['host'] = '127.0.0.1'
        options['debug'] = True
        app_options['auto_reload_templates'] = True

    else:
        options['host'] = '0.0.0.0'
        options['debug'] = False

    if args['--https']:
        from OpenSSL import SSL

        context = SSL.Context(SSL.SSLv23_METHOD)
        context.use_privatekey_file('server.key')
        context.use_certificate_file('server.crt')

        options['ssl_context'] = context

    app = create_web_app(**app_options)
    app.run(**options)


if __name__ == '__main__':
    main()
