#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
# Copyright (C) 2015-2016 East Asian Observatory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""
hedwigctl - Hedwig proposal system control tool

Usage:
    hedwigctl poll [-v | -q]
        (close | email | figure | pdf | publication | feedback | moc | all)
        [--pause <delay>] [--pidfile <file>] [--logfile <file>]
    hedwigctl test_server [--debug] [--https] [--port <port>]
    hedwigctl [-v | -q] initialize_database

Options:
    --help, -h                Show usage information.
    --verbose, -v             Print debugging information.
    --quiet, -q               Omit informational messages.
    --https                   Enable use of HTTPS.
    --port <port>             Specify server port number [default: 5678].
    --debug                   Run server in debug mode.
    --pause <delay>           Repeatedly poll at the given interval (seconds).
    --pidfile <file>          PID file to use to control execution.
    --logfile <file>          File in which to record logging information.
"""


from __future__ import absolute_import, division, print_function, \
    unicode_literals

import atexit
import logging
import os
from time import sleep

from docopt import docopt


integer_arguments = (
    '--port',
    '--pause',
)

commands = {}

script_name = 'hedwigctl'


def main():
    """
    Main routine for the hedwigctl tool.
    """

    args = docopt(__doc__)

    for integer_argument in integer_arguments:
        if args[integer_argument] is not None:
            args[integer_argument] = int(args[integer_argument])

    for (command, func) in commands.items():
        if args.get(command):
            func(args)
            break
    else:
        raise Exception('Unknown command')


def command(f):
    """
    Decorator which adds a function to our commands dictionary.
    """

    commands[f.__name__] = f
    return f


def _configure_logging(args):
    """
    Set up the standard Python logger based on the --verbose and --quiet
    options.
    """

    loglevel = logging.INFO

    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING

    logging.basicConfig(
        level=loglevel,
        datefmt='%Y-%m-%dT%H:%M:%S',
        format='%(asctime)s %(levelname)s %(name)s %(message)s',
        filename=args['--logfile'])


@command
def initialize_database(args):
    """
    Initialize the database as configured in the hedwig.ini file.
    """

    from hedwig.config import get_database
    from hedwig.db.meta import metadata

    _configure_logging(args)

    db = get_database()
    metadata.create_all(db._engine)


@command
def poll(args):
    """
    Poll for tasks to perform.
    """

    if args['--pidfile']:
        from hedwig.pidfile import pidfile_write, pidfile_running, \
            pidfile_delete

        pidfile = args['--pidfile']
        if pidfile_running(pidfile):
            return

        pidfile_write(pidfile, os.getpid())
        atexit.register(pidfile_delete, pidfile)

    from hedwig.admin.poll import close_completed_call, send_proposal_feedback
    from hedwig.config import get_database
    from hedwig.file.poll import process_moc, \
        process_proposal_figure, process_proposal_pdf
    from hedwig.email.poll import send_queued_messages
    from hedwig.publication.poll import process_publication_references
    from hedwig.util import get_logger

    _configure_logging(args)

    db = get_database()

    logger = get_logger(script_name)

    while True:
        if args['close'] or args['all']:
            logger.debug('Checking for calls to close')
            n_closed = close_completed_call(db=db)

            if n_closed:
                logger.info('Closed {} call(s)', n_closed)

        if args['email'] or args['all']:
            logger.debug('Checking for queued email messages')
            try:
                n_sent = send_queued_messages(db=db)

                if n_sent:
                    logger.info('Sent {} message(s)', n_sent)
            except:
                logger.exception('Error checking for queued email messages.')

        if args['figure'] or args['all']:
            logger.debug('Checking for figures to process')
            n_processed = process_proposal_figure(db=db)

            if n_processed:
                logger.info('Processed {} figure(s)', n_processed)

        if args['pdf'] or args['all']:
            logger.debug('Checking for PDF files to process')
            n_processed = process_proposal_pdf(db=db)

            if n_processed:
                logger.info('Processed {} PDF file(s)', n_processed)

        if args['publication'] or args['all']:
            logger.debug('Checking for publication references to process')
            n_processed = process_publication_references(db)

            if n_processed:
                logger.info('Processed {} publication reference(s)',
                            n_processed)

        if args['feedback'] or args['all']:
            logger.debug('Checking for proposals with feedback ready to send')
            n_processed = send_proposal_feedback(db)

            if n_processed:
                logger.info('Sent feedback for {} proposal(s)', n_processed)

        if args['moc'] or args['all']:
            logger.debug('Checking for MOC files to import')
            n_processed = process_moc(db)

            if n_processed:
                logger.info('Imported cells from {} MOC file(s)', n_processed)

        if args['--pause']:
            sleep(args['--pause'])

        else:
            break


@command
def test_server(args):
    """
    Run a test web service.

    The --debug option enables access to the debugger.  It must not
    be used in an environment where access to the server is not
    restricted.
    """

    from hedwig.web.app import create_web_app

    options = {
        'port': args['--port'],
    }
    app_options = {}

    if args['--debug']:
        options['host'] = '127.0.0.1'
        options['debug'] = True
        app_options['auto_reload_templates'] = True

    else:
        options['host'] = '0.0.0.0'
        options['debug'] = False

    if args['--https']:
        from OpenSSL import SSL

        context = SSL.Context(SSL.SSLv23_METHOD)
        context.use_privatekey_file('server.key')
        context.use_certificate_file('server.crt')

        options['ssl_context'] = context

    app = create_web_app(**app_options)
    app.run(**options)


if __name__ == '__main__':
    main()
